クラスは分野分けをするためのもの。
会社の部署が分かれているなど、現実では当たり前に行われていること。
経理部に情報だけ教えて、情報に対して経理部としての仕事をしてくれる。
役割を明確にして責務を分ける。
プログラムを組みやすくするためのもの。
情報の整理のためにあるもの。
契約書の原本などと考えるとイメージしやすい。
実際に使うのはコピー。
情報を欠落させる。
現実世界から比べるとなんかしら抜け落ちる。
クラスメソッドとクラスインスタンスメソッドがある。
self.classで呼べる内容が変わる。pで内容を呼び出せる。
classを作るとclassクラスのインスタンスを作っているような感じ。
.classで呼ばれる内容が変わる。
selfの有無で全然違う。
ないのはインスタンスメソッド、あるのはクラスのクラスメソッド。
どこかしらに所属している。
self.なり@つけてインスタンス変数にするなりが必要
いきなり変数宣言をして事故ることもある。
attr_acceorはメソッドでシンボルで変数になるデータが渡っている。
シンボルは内部的には数字なので検索が文字列でやるよりも早い、だからよく使われる。
シンボルを変数に入れて.object_idメソッドを使ってidを見られる。
新しくメモリを使わないのでいい。
attr_accsoerも文字列で取ることもできる。しかしメモリが無駄なので実際にはやらない。
本当に言葉だなあ。人間がわかりやすいように
sleepというデフォルトであるメソッドが。秒指定。
文字列はchar型の配列。だから配列を分解できる。 苦C読もう。
オブジェクト指向がわかっていないと難しい。
Ruby自体はそんなに。
Rubyはとにかく省略する
メソッドがtrueの間は？って書き方は可動性が上がる:
省略はわかりきってからは見やすくなりそうだな。
リアルを大事にしないとな。楽しく勉強。
オブジェクト指向はどう処理をするかではなく、どこで処理するか？by松田さん師匠。
日本語的に自然に。
条件分岐はそんなにパフォーマンスが落ちない。
オブジェクト指向で（鳴き声の話）やるのは可読性や修正のしやすさ関係。
ごりっごりのオブジェクト指向なので差分プログラミング的になる。
共通の処理はクラスで定義できる。
単発のメソッドはモジュールにする
三項演算子のネストはやっても２つくらいだいたい。
メソッドも式展開でうまいことやれる。
Rubymineおすすめ。一年２万円。

nagios オブジェクト指向 苦C アンチパターン Rubyモジュールの本？ アルゴリズム 型
